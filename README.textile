h1. base64_compabile

A drop-in replacement library for Ruby base64 encoding.

h2. Summary

The standard base64 library is fast, but technically not specification compatible. Everything it base64 encodes, it also MIME encodes. Beyond encode, the standard decode also fails on non-MIME data.

h2. Why would I use this?

First off, speed is not currently a reason to use base64_compatible. Standard base64 is much faster because much of it is written at the C level.

If correctness is more of a concern, and non-MIME base64 is your problem, you can stop your search here. You'll probably have to deal with non-MIME encoded data if you're dealing with lower level document formats, sending data at the socket layer, etc.

Save space in encoding size! Without the line-length cruft from the MIME standard and excessive byte padding, you'll end up with a smaller file.

h2. LICENSE

(The MIT License)
 
Copyright (c) 2009: Alan Da Costa
 
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
 
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
 
THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.